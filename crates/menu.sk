function openCrateRewardsMenu(p: player, crate: string, action: string = "view"):    
    if {crates::%{_crate}%} is not set:
        send "&cThat crate does not exist!" to {_p}
        exit 

    set {_inv} to chest inventory with 6 rows named "Crate Rewards: %prettify({_crate})%"

    set {_slots::*} to getMenuBorderSlots({_inv})
    set slot {_slots::*} of {_inv} to black stained glass pane named " "

    if {_action} = "edit":
        set {_tag} to "edit-crate-%{_crate}%"
    else if {_action} = "open":
        set {_tag} to "open-crate-%{_crate}%"
    else:
        set {_tag} to "view-crate"

    setMenu({_p}, {_tag})
    open {_inv} to {_p}

    fillCrateRewardsMenu({_inv}, {_crate})

    # has to be done after opening for some reason
    if {_action} = "open":
        set name of {_inv} to "Pick any reward!"

function fillCrateRewardsMenu(inv: inventory, crate: string):
    set {_slots::*} to getMenuBorderSlots({_inv}, true)

    set slot {_slots::*} of {_inv} to air 

    loop {_slots::*}:
        add 1 to {_n}
        set {_item} to {crates::%{_crate}%::rewards::%{_n}%}
        set slot loop-value of {_inv} to {_item}


on inventory click:
    set {_menu} to getMenu(player)
    exit if {_menu} does not contain "edit-crate"
        
    set {_crate} to last element out of (split {_menu} by "-")
    if event-inventory = top inventory of player:
        set {_slots::*} to getMenuBorderSlots(event-inventory)
        if {_slots::*} contains index of event-slot:
            cancel event 

on inventory click:
    set {_menu} to getMenu(player)
    exit if {_menu} != "view-crate"

    cancel event 

on inventory click:
    set {_menu} to getMenu(player)
    exit if {_menu} does not contain "open-crate"

    cancel event 

    if all:
        type of event-slot != black stained glass pane or air
        event-inventory = top inventory of player
    then:
        set {_item} to event-slot 
        giveItem(player, {_item})
        set {_msg} to {-cfg::crates::crateRewardMsg}
        replace all "<item>" in {_msg} with itemToChat({_item})
        send {_msg} to player
        close inventory of player

on inventory close:
    set {_menu} to getMenu(player)
    exit if {_menu} does not contain "edit-crate"

    set {_crate} to last element out of (split {_menu} by "-")
    set {_slots::*} to getMenuBorderSlots(event-inventory, true)
    set {crates::%{_crate}%::rewards::*} to (slot {_slots::*} of top inventory of player) where [type of input != air] 
    send "&aSaved rewards for %prettify({_crate})% crate"

on inventory close:
    set {_menu} to getMenu(player)
    exit if {_menu} does not contain "open-crate"

    if "%event-inventoryclosereason%" = "player":
        wait 1 tick 
        set {_crate} to last element out of (split {_menu} by "-")
        openCrateRewardsMenu(player, {_crate}, "open")